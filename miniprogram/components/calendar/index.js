"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var moment_1 = __importDefault(require("moment"));
Component({
    properties: {
        time: {
            type: String,
            value: ''
        }
    },
    data: {
        weekData: [
            { label: '一', id: 1 },
            { label: '二', id: 2 },
            { label: '三', id: 3 },
            { label: '四', id: 4 },
            { label: '五', id: 5 },
            { label: '六', id: 6 },
            { label: '日', id: 7 }
        ],
        publicDateArr: [{}],
        defaultTime: {}
    },
    lifetimes: {
        attached: function () {
            this.initDateArr();
        },
        detached: function () {
        }
    },
    methods: {
        initDateArr: function () {
            var time = this.properties.time;
            var initTime = {
                date: moment_1.default(time).date(),
                month: moment_1.default(time).month() + 1,
                year: moment_1.default(time).year()
            };
            this.setData({
                defaultTime: initTime
            });
            var firstDayInMonth = moment_1.default(time).startOf('M').format('YYYY-MM-DD');
            var lastDayInMonth = moment_1.default(time).endOf('M').format('YYYY-MM-DD');
            var firstDayInWeek = moment_1.default(firstDayInMonth).startOf('W');
            var lastDayInwWeek = moment_1.default(lastDayInMonth).endOf('W');
            var diffDays = lastDayInwWeek.diff(firstDayInWeek, 'days') + 1;
            var dateArr = [
                {
                    date: 0,
                    month: 0,
                    year: 0
                }
            ];
            for (var index = 0; index < diffDays; index++) {
                var dateMoment = firstDayInWeek.add(index, 'days');
                var dateItem = {
                    date: dateMoment.date(),
                    month: dateMoment.month() + 1,
                    year: dateMoment.year()
                };
                dateArr[index] = dateItem;
                firstDayInWeek = moment_1.default(firstDayInMonth).startOf('W');
            }
            this.setData({
                publicDateArr: dateArr
            });
        }
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLGtEQUE0QjtBQUU1QixTQUFTLENBQUM7SUFJUixVQUFVLEVBQUU7UUFFVixJQUFJLEVBQUU7WUFDSixJQUFJLEVBQUUsTUFBTTtZQUNaLEtBQUssRUFBRSxFQUFFO1NBQ1Y7S0FDRjtJQUtELElBQUksRUFBRTtRQUNKLFFBQVEsRUFBRTtZQUNSLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFO1lBQ3JCLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFO1lBQ3JCLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFO1lBQ3JCLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFO1lBQ3JCLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFO1lBQ3JCLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFO1lBQ3JCLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFO1NBQ3RCO1FBQ0QsYUFBYSxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQ25CLFdBQVcsRUFBRSxFQUFFO0tBQ2hCO0lBSUQsU0FBUyxFQUFFO1FBQ1QsUUFBUSxFQUFFO1lBQ1IsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3JCLENBQUM7UUFDRCxRQUFRLEVBQUU7UUFFVixDQUFDO0tBQ0Y7SUFLRCxPQUFPLEVBQUU7UUFDUCxXQUFXO1lBQ0QsSUFBQSxJQUFJLEdBQUssSUFBSSxDQUFDLFVBQVUsS0FBcEIsQ0FBcUI7WUFDakMsSUFBTSxRQUFRLEdBQUc7Z0JBQ2YsSUFBSSxFQUFFLGdCQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFO2dCQUN6QixLQUFLLEVBQUUsZ0JBQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDO2dCQUMvQixJQUFJLEVBQUUsZ0JBQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUU7YUFDMUIsQ0FBQztZQUNGLElBQUksQ0FBQyxPQUFPLENBQUM7Z0JBQ1gsV0FBVyxFQUFFLFFBQVE7YUFDdEIsQ0FBQyxDQUFDO1lBQ0gsSUFBTSxlQUFlLEdBQUcsZ0JBQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQ3ZFLElBQU0sY0FBYyxHQUFHLGdCQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUNwRSxJQUFJLGNBQWMsR0FBRyxnQkFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUMxRCxJQUFNLGNBQWMsR0FBRyxnQkFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUV6RCxJQUFNLFFBQVEsR0FBRyxjQUFjLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7WUFFakUsSUFBSSxPQUFPLEdBQUc7Z0JBQ1o7b0JBQ0UsSUFBSSxFQUFFLENBQUM7b0JBQ1AsS0FBSyxFQUFFLENBQUM7b0JBQ1IsSUFBSSxFQUFFLENBQUM7aUJBQ1I7YUFDRixDQUFDO1lBQ0YsS0FBSyxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUUsS0FBSyxHQUFHLFFBQVEsRUFBRSxLQUFLLEVBQUUsRUFBRTtnQkFDN0MsSUFBTSxVQUFVLEdBQUcsY0FBYyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7Z0JBQ3JELElBQU0sUUFBUSxHQUFHO29CQUNmLElBQUksRUFBRSxVQUFVLENBQUMsSUFBSSxFQUFFO29CQUN2QixLQUFLLEVBQUUsVUFBVSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUM7b0JBQzdCLElBQUksRUFBRSxVQUFVLENBQUMsSUFBSSxFQUFFO2lCQUN4QixDQUFDO2dCQUNGLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxRQUFRLENBQUM7Z0JBQzFCLGNBQWMsR0FBRyxnQkFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUN2RDtZQUNELElBQUksQ0FBQyxPQUFPLENBQUM7Z0JBQ1gsYUFBYSxFQUFFLE9BQU87YUFDdkIsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztLQUNGO0NBQ0YsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gY29tcG9uZW50cy9jYWxlbmRhci9pbmRleC5qc1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuXG5Db21wb25lbnQoe1xuICAvKipcbiAgICog57uE5Lu255qE5bGe5oCn5YiX6KGoXG4gICAqL1xuICBwcm9wZXJ0aWVzOiB7XG4gICAgLyoq5b2T5YmN5pe26Ze0ICovXG4gICAgdGltZToge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgdmFsdWU6ICcnXG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiDnu4Tku7bnmoTliJ3lp4vmlbDmja5cbiAgICovXG4gIGRhdGE6IHtcbiAgICB3ZWVrRGF0YTogW1xuICAgICAgeyBsYWJlbDogJ+S4gCcsIGlkOiAxIH0sXG4gICAgICB7IGxhYmVsOiAn5LqMJywgaWQ6IDIgfSxcbiAgICAgIHsgbGFiZWw6ICfkuIknLCBpZDogMyB9LFxuICAgICAgeyBsYWJlbDogJ+WbmycsIGlkOiA0IH0sXG4gICAgICB7IGxhYmVsOiAn5LqUJywgaWQ6IDUgfSxcbiAgICAgIHsgbGFiZWw6ICflha0nLCBpZDogNiB9LFxuICAgICAgeyBsYWJlbDogJ+aXpScsIGlkOiA3IH1cbiAgICBdLFxuICAgIHB1YmxpY0RhdGVBcnI6IFt7fV0sXG4gICAgZGVmYXVsdFRpbWU6IHt9XG4gIH0sXG4gIC8qKlxuICAgKiDnu4Tku7bnmoTnlJ/lkb3lkajmnJ9cbiAgICovXG4gIGxpZmV0aW1lczoge1xuICAgIGF0dGFjaGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmluaXREYXRlQXJyKCk7XG4gICAgfSxcbiAgICBkZXRhY2hlZDogZnVuY3Rpb24gKCkge1xuICAgICAgLy8g5Zyo57uE5Lu25a6e5L6L6KKr5LuO6aG16Z2i6IqC54K55qCR56e76Zmk5pe25omn6KGMXG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiDnu4Tku7bnmoTmlrnms5XliJfooahcbiAgICovXG4gIG1ldGhvZHM6IHtcbiAgICBpbml0RGF0ZUFycigpIHtcbiAgICAgIGNvbnN0IHsgdGltZSB9ID0gdGhpcy5wcm9wZXJ0aWVzO1xuICAgICAgY29uc3QgaW5pdFRpbWUgPSB7XG4gICAgICAgIGRhdGU6IG1vbWVudCh0aW1lKS5kYXRlKCksXG4gICAgICAgIG1vbnRoOiBtb21lbnQodGltZSkubW9udGgoKSArIDEsXG4gICAgICAgIHllYXI6IG1vbWVudCh0aW1lKS55ZWFyKClcbiAgICAgIH07XG4gICAgICB0aGlzLnNldERhdGEoe1xuICAgICAgICBkZWZhdWx0VGltZTogaW5pdFRpbWVcbiAgICAgIH0pO1xuICAgICAgY29uc3QgZmlyc3REYXlJbk1vbnRoID0gbW9tZW50KHRpbWUpLnN0YXJ0T2YoJ00nKS5mb3JtYXQoJ1lZWVktTU0tREQnKTtcbiAgICAgIGNvbnN0IGxhc3REYXlJbk1vbnRoID0gbW9tZW50KHRpbWUpLmVuZE9mKCdNJykuZm9ybWF0KCdZWVlZLU1NLUREJyk7XG4gICAgICBsZXQgZmlyc3REYXlJbldlZWsgPSBtb21lbnQoZmlyc3REYXlJbk1vbnRoKS5zdGFydE9mKCdXJyk7XG4gICAgICBjb25zdCBsYXN0RGF5SW53V2VlayA9IG1vbWVudChsYXN0RGF5SW5Nb250aCkuZW5kT2YoJ1cnKTtcbiAgICAgIC8vIOi/memHjOiuoeeul+WHuuW9k+WJjeaXpeacn+aJgOWcqOaciOS7veaAu+WFseacieWHoOWRqFxuICAgICAgY29uc3QgZGlmZkRheXMgPSBsYXN0RGF5SW53V2Vlay5kaWZmKGZpcnN0RGF5SW5XZWVrLCAnZGF5cycpICsgMTtcbiAgICAgIC8vIOWvueaXpeacn+aVsOe7hOi/m+ihjOa3u+WKoFxuICAgICAgbGV0IGRhdGVBcnIgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICBkYXRlOiAwLFxuICAgICAgICAgIG1vbnRoOiAwLFxuICAgICAgICAgIHllYXI6IDBcbiAgICAgICAgfVxuICAgICAgXTtcbiAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBkaWZmRGF5czsgaW5kZXgrKykge1xuICAgICAgICBjb25zdCBkYXRlTW9tZW50ID0gZmlyc3REYXlJbldlZWsuYWRkKGluZGV4LCAnZGF5cycpO1xuICAgICAgICBjb25zdCBkYXRlSXRlbSA9IHtcbiAgICAgICAgICBkYXRlOiBkYXRlTW9tZW50LmRhdGUoKSxcbiAgICAgICAgICBtb250aDogZGF0ZU1vbWVudC5tb250aCgpICsgMSxcbiAgICAgICAgICB5ZWFyOiBkYXRlTW9tZW50LnllYXIoKVxuICAgICAgICB9O1xuICAgICAgICBkYXRlQXJyW2luZGV4XSA9IGRhdGVJdGVtO1xuICAgICAgICBmaXJzdERheUluV2VlayA9IG1vbWVudChmaXJzdERheUluTW9udGgpLnN0YXJ0T2YoJ1cnKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICAgIHB1YmxpY0RhdGVBcnI6IGRhdGVBcnJcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufSk7XG4iXX0=